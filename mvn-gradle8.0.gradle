apply plugin: 'maven-publish'
//apply plugin: 'signing'

task comps {
    afterEvaluate {
        println("Components: " + components*.name)
    }
}

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def configurePom(pom) {
    pom.name = POM_NAME
    pom.packaging = POM_PACKAGING ? POM_PACKAGING : 'jar'
    pom.description = POM_DESCRIPTION
    pom.url = POM_URL

    pom.scm {
        url = POM_SCM_URL
        connection = POM_SCM_CONNECTION
        developerConnection = POM_SCM_DEV_CONNECTION
    }

    pom.licenses {
        license {
            name = POM_LICENCE_NAME
            url = POM_LICENCE_URL
        }
    }

    pom.developers {
        developer {
            id = POM_DEVELOPER_ID
            name = POM_DEVELOPER_NAME
            email = POM_DEVELOPER_EMAIL
        }
    }
}

android {
    flavorDimensions 'default'
    publishing {
        singleVariant("mvnCentralRelease")
    }
    productFlavors {
        mvnCentral {
            dimension 'default'
            versionCode VERSION_CODE.toInteger()
            versionName VERSION_NAME
        }
    }
}

afterEvaluate {
    publishing {
//        tasks.withType(GenerateModuleMetadata) {
//            enabled = false
//        }
        publications {
            mvnCentralRelease(MavenPublication) {
                from components.mvnCentralRelease
                groupId = GROUP
                artifactId = ARTIFACT_ID
                version = VERSION_NAME
                configurePom(pom)
            }
        }
        repositories {
            mavenCentral {
                def releasesRepoUrl = getReleaseRepositoryUrl()
                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
                url = isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
                println(url)
                credentials(PasswordCredentials) {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                    println(username)
                    println(password)
                }
            }
        }
    }
//    signing {
//        publishing.publications.all { publication ->
//            sign publication
//        }
//    }
}



//    Maven publishing DSL object for configuring options related to publishing AAR.
//------1------
//    To publish just one variant, use singleVariant. The following sets up publishing of only the fullRelease variant of an android library.
//    This project has four build variants: fullDebug, fullRelease, demoDebug, demoRelease
//    android {
//        // This project has four build variants: fullDebug, fullRelease, demoDebug, demoRelease
//        flavorDimensions 'mode'
//        productFlavors {
//            full {}
//            demo {}
//        }
//
//        publishing {
//            // Publishes "fullRelease" build variant with "fullRelease" component created by
//            // Android Gradle plugin
//            singleVariant("fullRelease")
//        }
//    }
//    afterEvaluate {
//        publishing {
//            publications {
//                fullRelease(MavenPublication) {
//                    from components.fullRelease
//                    // ......
//                }
//            }
//        }
//    }
//------2------
//   To publish multiple variants, use multipleVariants. The following sets up publishing of both fullDebug and fullRelease variants of an android library.
//    android {
//        publishing {
//            // Published fullDebug and fullRelease build variants with "full" component created by
//            // Android Gradle Plugin. The buildType attribute is added to published build variants.
//            // As only a single flavor from "mode" dimension is included, no flavor attribute is
//            // included.
//            multipleVariants("full") {
//                includeBuildTypeValues("debug", "release")
//                includeFlavorDimensionAndValues("mode", "full")
//            }
//        }
//    }
//    afterEvaluate {
//        publishing {
//            publications {
//                full(MavenPublication) {
//                    from components.full
//                    // ......
//                }
//            }
//        }
//    }
//------3------
//    To publish all the build variants, you can use MultipleVariants.allVariants as a shortcut instead of filtering variants with MultipleVariants.includeBuildTypeValues and MultipleVariants.includeFlavorDimensionAndValues.
//    android {
//        publishing {
//            // Publishes all build variants with "default" component
//            multipleVariants {
//                allVariants()
//            }
//        }
//    }
//    afterEvaluate {
//        publishing {
//            publications {
//                allVariants(MavenPublication) {
//                    from components.default
//                    // ......
//                }
//            }
//        }
//    }
//------4------
//    This following code example shows how to create two publications one for demoRelease build variant, one for fullDebug & fullRelease build variants.
//    android {
//        publishing {
//            // Publish "demoRelease" build variant with "demoRelease" component
//            singleVariant("demoRelease")
//
//            // Publish "fullDebug" and "fullRelease" build variants with "full" component
//            multipleVariants("full") {
//                includeBuildTypeValues("debug", "release")
//                includeFlavorDimensionAndValues("mode", "full")
//            }
//        }
//    }
//    afterEvaluate {
//        publishing {
//            publications {
//                // Creates two publications with different artifactIds
//                full(MavenPublication) {
//                    from components.full
//                    groupId = 'com.example.MyLibrary'
//                    artifactId = 'final-full'
//                    version = '1.0'
//                }
//                demoRelease(MavenPublication) {
//                    from components.demoRelease
//                    groupId = 'com.example.MyLibrary'
//                    artifactId = 'final-demo'
//                    version = '1.0'
//                }
//            }
//        }
//    }
//------5------
//The testFixtures component is published by default with its main variant. To disable publishing the testFixtures component, see the following example.
//    afterEvaluate {
//        // Disable publishing test fixtures of release variant
//        components.release.withVariantsFromConfiguration(
//                configurations.releaseTestFixturesVariantReleaseApiPublication) { skip() }
//        components.release.withVariantsFromConfiguration(
//                configurations.releaseTestFixturesVariantReleaseRuntimePublication) { skip() }
//    }